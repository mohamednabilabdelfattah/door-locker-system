
doorLocker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00002422  000024b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000c6  008000c6  0000251c  2**0
                  ALLOC
  3 .stab         00002a24  00000000  00000000  0000251c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019f6  00000000  00000000  00004f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006936  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000882f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000971a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b083  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3c       	cpi	r26, 0xCB	; 203
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a8 10 	call	0x2150	; 0x2150 <main>
      8a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae eb       	ldi	r26, 0xBE	; 190
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e eb       	ldi	r24, 0xBE	; 190
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_init>:
 * 1. set the mode
 * 2. initial value of compare mode
 * 3. enable the mode interrupt
 * 4. set prescalar
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer1_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	/*set the mode*/
	TCCR1B = (TCCR1B & 0xF7) | (Config_Ptr->mode<<WGM12);
     b54:	ae e4       	ldi	r26, 0x4E	; 78
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	ee e4       	ldi	r30, 0x4E	; 78
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	28 2f       	mov	r18, r24
     b60:	27 7f       	andi	r18, 0xF7	; 247
     b62:	e9 81       	ldd	r30, Y+1	; 0x01
     b64:	fa 81       	ldd	r31, Y+2	; 0x02
     b66:	85 81       	ldd	r24, Z+5	; 0x05
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	82 2b       	or	r24, r18
     b7a:	8c 93       	st	X, r24
	/*set the initial value */
	TCNT1 = Config_Ptr -> initial_value;
     b7c:	ac e4       	ldi	r26, 0x4C	; 76
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e9 81       	ldd	r30, Y+1	; 0x01
     b82:	fa 81       	ldd	r31, Y+2	; 0x02
     b84:	80 81       	ld	r24, Z
     b86:	91 81       	ldd	r25, Z+1	; 0x01
     b88:	11 96       	adiw	r26, 0x01	; 1
     b8a:	9c 93       	st	X, r25
     b8c:	8e 93       	st	-X, r24
	/*set the compare value in case of compare mode*/
	if(Config_Ptr -> mode)
     b8e:	e9 81       	ldd	r30, Y+1	; 0x01
     b90:	fa 81       	ldd	r31, Y+2	; 0x02
     b92:	85 81       	ldd	r24, Z+5	; 0x05
     b94:	88 23       	and	r24, r24
     b96:	89 f0       	breq	.+34     	; 0xbba <Timer1_init+0x74>
	{
		OCR1A = Config_Ptr -> compare_value;
     b98:	aa e4       	ldi	r26, 0x4A	; 74
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e9 81       	ldd	r30, Y+1	; 0x01
     b9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ba0:	82 81       	ldd	r24, Z+2	; 0x02
     ba2:	93 81       	ldd	r25, Z+3	; 0x03
     ba4:	11 96       	adiw	r26, 0x01	; 1
     ba6:	9c 93       	st	X, r25
     ba8:	8e 93       	st	-X, r24
		/*enable the interrupt*/
		SET_BIT(TIMSK,OCIE1A);
     baa:	a9 e5       	ldi	r26, 0x59	; 89
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e9 e5       	ldi	r30, 0x59	; 89
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	80 61       	ori	r24, 0x10	; 16
     bb6:	8c 93       	st	X, r24
     bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <Timer1_init+0x82>
	}else{
		/*enable the interrupt*/
		SET_BIT(TIMSK,TOIE1);
     bba:	a9 e5       	ldi	r26, 0x59	; 89
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e9 e5       	ldi	r30, 0x59	; 89
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	8c 93       	st	X, r24
	}
	/*set the prescalar*/
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr -> prescaler);
     bc8:	ae e4       	ldi	r26, 0x4E	; 78
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ee e4       	ldi	r30, 0x4E	; 78
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	98 2f       	mov	r25, r24
     bd4:	98 7f       	andi	r25, 0xF8	; 248
     bd6:	e9 81       	ldd	r30, Y+1	; 0x01
     bd8:	fa 81       	ldd	r31, Y+2	; 0x02
     bda:	84 81       	ldd	r24, Z+4	; 0x04
     bdc:	89 2b       	or	r24, r25
     bde:	8c 93       	st	X, r24
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <Timer1_deInit>:
/*
 * Description : Function to deinit the TIMER1 driver
 *  . disable the clock of the timer and intertupts
 */
void Timer1_deInit(void){
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	/*disable the clock*/
	TCCR1B = (TCCR1B & 0xF8);
     bf2:	ae e4       	ldi	r26, 0x4E	; 78
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	ee e4       	ldi	r30, 0x4E	; 78
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	88 7f       	andi	r24, 0xF8	; 248
     bfe:	8c 93       	st	X, r24
	/*disable the interrupt*/
	CLEAR_BIT(TIMSK,OCIE1A);
     c00:	a9 e5       	ldi	r26, 0x59	; 89
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e9 e5       	ldi	r30, 0x59	; 89
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8f 7e       	andi	r24, 0xEF	; 239
     c0c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE1);
     c0e:	a9 e5       	ldi	r26, 0x59	; 89
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e9 e5       	ldi	r30, 0x59	; 89
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8b 7f       	andi	r24, 0xFB	; 251
     c1a:	8c 93       	st	X, r24
}
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <Timer1_setCallBack>:
/*
 * Description : Function to set the TIMER1 call back
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <Timer1_setCallBack+0x6>
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	9a 83       	std	Y+2, r25	; 0x02
     c2e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	90 93 c7 00 	sts	0x00C7, r25
     c38:	80 93 c6 00 	sts	0x00C6, r24
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <__vector_7>:
/*******************************************************************************
 *                      ISRs implementations                                   *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect){
     c46:	1f 92       	push	r1
     c48:	0f 92       	push	r0
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	0f 92       	push	r0
     c4e:	11 24       	eor	r1, r1
     c50:	2f 93       	push	r18
     c52:	3f 93       	push	r19
     c54:	4f 93       	push	r20
     c56:	5f 93       	push	r21
     c58:	6f 93       	push	r22
     c5a:	7f 93       	push	r23
     c5c:	8f 93       	push	r24
     c5e:	9f 93       	push	r25
     c60:	af 93       	push	r26
     c62:	bf 93       	push	r27
     c64:	ef 93       	push	r30
     c66:	ff 93       	push	r31
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
	/*call the callback function*/
	(*g_callBackPtr)();
     c70:	e0 91 c6 00 	lds	r30, 0x00C6
     c74:	f0 91 c7 00 	lds	r31, 0x00C7
     c78:	09 95       	icall
}
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	bf 91       	pop	r27
     c84:	af 91       	pop	r26
     c86:	9f 91       	pop	r25
     c88:	8f 91       	pop	r24
     c8a:	7f 91       	pop	r23
     c8c:	6f 91       	pop	r22
     c8e:	5f 91       	pop	r21
     c90:	4f 91       	pop	r20
     c92:	3f 91       	pop	r19
     c94:	2f 91       	pop	r18
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	0f 90       	pop	r0
     c9c:	1f 90       	pop	r1
     c9e:	18 95       	reti

00000ca0 <__vector_9>:
ISR(TIMER1_OVF_vect){
     ca0:	1f 92       	push	r1
     ca2:	0f 92       	push	r0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	0f 92       	push	r0
     ca8:	11 24       	eor	r1, r1
     caa:	2f 93       	push	r18
     cac:	3f 93       	push	r19
     cae:	4f 93       	push	r20
     cb0:	5f 93       	push	r21
     cb2:	6f 93       	push	r22
     cb4:	7f 93       	push	r23
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	af 93       	push	r26
     cbc:	bf 93       	push	r27
     cbe:	ef 93       	push	r30
     cc0:	ff 93       	push	r31
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	/*call the callback function*/
	(*g_callBackPtr)();
     cca:	e0 91 c6 00 	lds	r30, 0x00C6
     cce:	f0 91 c7 00 	lds	r31, 0x00C7
     cd2:	09 95       	icall
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	ff 91       	pop	r31
     cda:	ef 91       	pop	r30
     cdc:	bf 91       	pop	r27
     cde:	af 91       	pop	r26
     ce0:	9f 91       	pop	r25
     ce2:	8f 91       	pop	r24
     ce4:	7f 91       	pop	r23
     ce6:	6f 91       	pop	r22
     ce8:	5f 91       	pop	r21
     cea:	4f 91       	pop	r20
     cec:	3f 91       	pop	r19
     cee:	2f 91       	pop	r18
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <PWM_Timer0_Start>:
 * params(out): None
 * desciption: this function to setup direction of specific bit in specific port
 * */

void PWM_Timer0_Start(uint8 duty_cycle)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	0f 92       	push	r0
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	89 83       	std	Y+1, r24	; 0x01
	/*specify the mode of the timer with pwm*/
	SET_BIT(TCCR0,WGM00);
     d06:	a3 e5       	ldi	r26, 0x53	; 83
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e3 e5       	ldi	r30, 0x53	; 83
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 64       	ori	r24, 0x40	; 64
     d12:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
     d14:	a3 e5       	ldi	r26, 0x53	; 83
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e3 e5       	ldi	r30, 0x53	; 83
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	88 60       	ori	r24, 0x08	; 8
     d20:	8c 93       	st	X, r24

	/*set the mode to non-inverting mode*/
	SET_BIT(TCCR0,COM01);
     d22:	a3 e5       	ldi	r26, 0x53	; 83
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e3 e5       	ldi	r30, 0x53	; 83
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	80 62       	ori	r24, 0x20	; 32
     d2e:	8c 93       	st	X, r24

	/*set the prescalar*/
	SET_BIT(TCCR0,CS01);
     d30:	a3 e5       	ldi	r26, 0x53	; 83
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e3 e5       	ldi	r30, 0x53	; 83
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	82 60       	ori	r24, 0x02	; 2
     d3c:	8c 93       	st	X, r24

	/*set the initial value of timer*/
	TCNT0 = 0;
     d3e:	e2 e5       	ldi	r30, 0x52	; 82
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	10 82       	st	Z, r1

	/*set the compare value based on the duty cycle*/
	OCR0 = (uint8)((uint16)(255*duty_cycle)/100);
     d44:	ec e5       	ldi	r30, 0x5C	; 92
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	48 2f       	mov	r20, r24
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	ca 01       	movw	r24, r20
     d50:	9c 01       	movw	r18, r24
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	c9 01       	movw	r24, r18
     d58:	96 95       	lsr	r25
     d5a:	98 2f       	mov	r25, r24
     d5c:	88 27       	eor	r24, r24
     d5e:	97 95       	ror	r25
     d60:	87 95       	ror	r24
     d62:	82 1b       	sub	r24, r18
     d64:	93 0b       	sbc	r25, r19
     d66:	84 0f       	add	r24, r20
     d68:	95 1f       	adc	r25, r21
     d6a:	24 e6       	ldi	r18, 0x64	; 100
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	b9 01       	movw	r22, r18
     d70:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__udivmodhi4>
     d74:	cb 01       	movw	r24, r22
     d76:	80 83       	st	Z, r24

	/*setup the direction of the pin of the timer 0 pwm*/
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	63 e0       	ldi	r22, 0x03	; 3
     d7c:	41 e0       	ldi	r20, 0x01	; 1
     d7e:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
}
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <UART_init+0x6>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <UART_init+0x8>
     d92:	00 d0       	rcall	.+0      	; 0xd94 <UART_init+0xa>
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	6b 83       	std	Y+3, r22	; 0x03
     d9a:	7c 83       	std	Y+4, r23	; 0x04
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     da0:	1a 82       	std	Y+2, r1	; 0x02
     da2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     da4:	eb e2       	ldi	r30, 0x2B	; 43
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     dac:	ea e2       	ldi	r30, 0x2A	; 42
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	88 e1       	ldi	r24, 0x18	; 24
     db2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
     db4:	e0 e4       	ldi	r30, 0x40	; 64
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	86 e8       	ldi	r24, 0x86	; 134
     dba:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	ad 81       	ldd	r26, Y+5	; 0x05
     dc2:	be 81       	ldd	r27, Y+6	; 0x06
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	aa 1f       	adc	r26, r26
     dd2:	bb 1f       	adc	r27, r27
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	aa 1f       	adc	r26, r26
     dda:	bb 1f       	adc	r27, r27
     ddc:	9c 01       	movw	r18, r24
     dde:	ad 01       	movw	r20, r26
     de0:	80 e4       	ldi	r24, 0x40	; 64
     de2:	92 e4       	ldi	r25, 0x42	; 66
     de4:	af e0       	ldi	r26, 0x0F	; 15
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	bc 01       	movw	r22, r24
     dea:	cd 01       	movw	r24, r26
     dec:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodsi4>
     df0:	da 01       	movw	r26, r20
     df2:	c9 01       	movw	r24, r18
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     dfa:	e0 e4       	ldi	r30, 0x40	; 64
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	89 2f       	mov	r24, r25
     e04:	99 27       	eor	r25, r25
     e06:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     e08:	e9 e2       	ldi	r30, 0x29	; 41
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	80 83       	st	Z, r24
}
     e10:	26 96       	adiw	r28, 0x06	; 6
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     e2e:	eb e2       	ldi	r30, 0x2B	; 43
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	80 72       	andi	r24, 0x20	; 32
     e3a:	90 70       	andi	r25, 0x00	; 0
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	b9 f3       	breq	.-18     	; 0xe2e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     e40:	ec e2       	ldi	r30, 0x2C	; 44
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     e58:	eb e2       	ldi	r30, 0x2B	; 43
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	88 23       	and	r24, r24
     e60:	dc f7       	brge	.-10     	; 0xe58 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     e62:	ec e2       	ldi	r30, 0x2C	; 44
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	00 d0       	rcall	.+0      	; 0xe74 <UART_sendString+0x6>
     e74:	0f 92       	push	r0
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	9b 83       	std	Y+3, r25	; 0x03
     e7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e7e:	19 82       	std	Y+1, r1	; 0x01
     e80:	0e c0       	rjmp	.+28     	; 0xe9e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	9b 81       	ldd	r25, Y+3	; 0x03
     e8c:	fc 01       	movw	r30, r24
     e8e:	e2 0f       	add	r30, r18
     e90:	f3 1f       	adc	r31, r19
     e92:	80 81       	ld	r24, Z
     e94:	0e 94 11 07 	call	0xe22	; 0xe22 <UART_sendByte>
		i++;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	9b 81       	ldd	r25, Y+3	; 0x03
     ea8:	fc 01       	movw	r30, r24
     eaa:	e2 0f       	add	r30, r18
     eac:	f3 1f       	adc	r31, r19
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	39 f7       	brne	.-50     	; 0xe82 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <UART_receiveString+0xa>
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	9b 83       	std	Y+3, r25	; 0x03
     ed2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ed4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	9b 81       	ldd	r25, Y+3	; 0x03
     ee0:	8c 01       	movw	r16, r24
     ee2:	02 0f       	add	r16, r18
     ee4:	13 1f       	adc	r17, r19
     ee6:	0e 94 28 07 	call	0xe50	; 0xe50 <UART_recieveByte>
     eea:	f8 01       	movw	r30, r16
     eec:	80 83       	st	Z, r24
     eee:	0f c0       	rjmp	.+30     	; 0xf0e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	9b 81       	ldd	r25, Y+3	; 0x03
     f00:	8c 01       	movw	r16, r24
     f02:	02 0f       	add	r16, r18
     f04:	13 1f       	adc	r17, r19
     f06:	0e 94 28 07 	call	0xe50	; 0xe50 <UART_recieveByte>
     f0a:	f8 01       	movw	r30, r16
     f0c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	9b 81       	ldd	r25, Y+3	; 0x03
     f18:	fc 01       	movw	r30, r24
     f1a:	e2 0f       	add	r30, r18
     f1c:	f3 1f       	adc	r31, r19
     f1e:	80 81       	ld	r24, Z
     f20:	83 32       	cpi	r24, 0x23	; 35
     f22:	31 f7       	brne	.-52     	; 0xef0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	9b 81       	ldd	r25, Y+3	; 0x03
     f2e:	fc 01       	movw	r30, r24
     f30:	e2 0f       	add	r30, r18
     f32:	f3 1f       	adc	r31, r19
     f34:	10 82       	st	Z, r1
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <GPIO_setupPinDirection>:
 * params(out): None
 * desciption: this function to setup direction of specific bit in specific port
 * */

 void GPIO_setupPinDirection(GPIO_PortId portId,GPIO_PinId pinId,GPIO_PinDirection pinDirection)
 {
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	27 97       	sbiw	r28, 0x07	; 7
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	8b 83       	std	Y+3, r24	; 0x03
     f5c:	6c 83       	std	Y+4, r22	; 0x04
     f5e:	4d 83       	std	Y+5, r20	; 0x05
	volatile uint8* ptr;
	switch(portId)
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	3f 83       	std	Y+7, r19	; 0x07
     f68:	2e 83       	std	Y+6, r18	; 0x06
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	9f 81       	ldd	r25, Y+7	; 0x07
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	91 05       	cpc	r25, r1
     f72:	d1 f0       	breq	.+52     	; 0xfa8 <GPIO_setupPinDirection+0x62>
     f74:	2e 81       	ldd	r18, Y+6	; 0x06
     f76:	3f 81       	ldd	r19, Y+7	; 0x07
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	2c f4       	brge	.+10     	; 0xf88 <GPIO_setupPinDirection+0x42>
     f7e:	8e 81       	ldd	r24, Y+6	; 0x06
     f80:	9f 81       	ldd	r25, Y+7	; 0x07
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	61 f0       	breq	.+24     	; 0xf9e <GPIO_setupPinDirection+0x58>
     f86:	1e c0       	rjmp	.+60     	; 0xfc4 <GPIO_setupPinDirection+0x7e>
     f88:	2e 81       	ldd	r18, Y+6	; 0x06
     f8a:	3f 81       	ldd	r19, Y+7	; 0x07
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	81 f0       	breq	.+32     	; 0xfb2 <GPIO_setupPinDirection+0x6c>
     f92:	8e 81       	ldd	r24, Y+6	; 0x06
     f94:	9f 81       	ldd	r25, Y+7	; 0x07
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	91 05       	cpc	r25, r1
     f9a:	81 f0       	breq	.+32     	; 0xfbc <GPIO_setupPinDirection+0x76>
     f9c:	13 c0       	rjmp	.+38     	; 0xfc4 <GPIO_setupPinDirection+0x7e>
	{
		case PORTA_ID:
			ptr = &DDRA;
     f9e:	8a e3       	ldi	r24, 0x3A	; 58
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <GPIO_setupPinDirection+0x7e>
			break;
		case PORTB_ID:
			ptr = &DDRB;
     fa8:	87 e3       	ldi	r24, 0x37	; 55
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <GPIO_setupPinDirection+0x7e>
			break;
		case PORTC_ID:
			ptr = &DDRC;
     fb2:	84 e3       	ldi	r24, 0x34	; 52
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <GPIO_setupPinDirection+0x7e>
			break;
		case PORTD_ID:
			ptr = &DDRD;
     fbc:	81 e3       	ldi	r24, 0x31	; 49
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}
	if(pinDirection == PIN_INPUT)
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	88 23       	and	r24, r24
     fc8:	a9 f4       	brne	.+42     	; 0xff4 <GPIO_setupPinDirection+0xae>
	{
		CLEAR_BIT(*ptr,pinId);
     fca:	e9 81       	ldd	r30, Y+1	; 0x01
     fcc:	fa 81       	ldd	r31, Y+2	; 0x02
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_setupPinDirection+0x9e>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_setupPinDirection+0x9a>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	e9 81       	ldd	r30, Y+1	; 0x01
     fee:	fa 81       	ldd	r31, Y+2	; 0x02
     ff0:	80 83       	st	Z, r24
     ff2:	13 c0       	rjmp	.+38     	; 0x101a <GPIO_setupPinDirection+0xd4>
	}
	else
	{
		SET_BIT(*ptr,pinId);
     ff4:	e9 81       	ldd	r30, Y+1	; 0x01
     ff6:	fa 81       	ldd	r31, Y+2	; 0x02
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <GPIO_setupPinDirection+0xc8>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <GPIO_setupPinDirection+0xc4>
    1012:	84 2b       	or	r24, r20
    1014:	e9 81       	ldd	r30, Y+1	; 0x01
    1016:	fa 81       	ldd	r31, Y+2	; 0x02
    1018:	80 83       	st	Z, r24
	}
 }
    101a:	27 96       	adiw	r28, 0x07	; 7
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <GPIO_setupPortDirection>:
 * params(out): None
 * desciption: this function to setup direction of specific port
 * */

 void GPIO_setupPortDirection(GPIO_PortId portID,GPIO_PortDirection portDirection)
 {
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <GPIO_setupPortDirection+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <GPIO_setupPortDirection+0x8>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <GPIO_setupPortDirection+0xa>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	6c 83       	std	Y+4, r22	; 0x04
	 volatile uint8* ptr;
	 switch(portID)
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3e 83       	std	Y+6, r19	; 0x06
    1046:	2d 83       	std	Y+5, r18	; 0x05
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5a>
    1052:	2d 81       	ldd	r18, Y+5	; 0x05
    1054:	3e 81       	ldd	r19, Y+6	; 0x06
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3a>
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x50>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x76>
    1066:	2d 81       	ldd	r18, Y+5	; 0x05
    1068:	3e 81       	ldd	r19, Y+6	; 0x06
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x64>
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x6e>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x76>
	 {
			case PORTA_ID:
			ptr = &DDRA;
    107c:	8a e3       	ldi	r24, 0x3A	; 58
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x76>
			break;
		case PORTB_ID:
			ptr = &DDRB;
    1086:	87 e3       	ldi	r24, 0x37	; 55
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x76>
			break;
		case PORTC_ID:
			ptr = &DDRC;
    1090:	84 e3       	ldi	r24, 0x34	; 52
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x76>
			break;
		case PORTD_ID:
			ptr = &DDRD;
    109a:	81 e3       	ldi	r24, 0x31	; 49
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	 }
	 *ptr = portDirection;
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	80 83       	st	Z, r24
 }
    10aa:	26 96       	adiw	r28, 0x06	; 6
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <GPIO_readPin>:
 * params(out): None
 * desciption: this function to read value of a pin
 * */

 uint8 GPIO_readPin(GPIO_PortId portId,GPIO_PinId pinId)
 {
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <GPIO_readPin+0x6>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <GPIO_readPin+0x8>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <GPIO_readPin+0xa>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	8b 83       	std	Y+3, r24	; 0x03
    10cc:	6c 83       	std	Y+4, r22	; 0x04
	 volatile uint8* ptr;
	 switch(portId)
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3e 83       	std	Y+6, r19	; 0x06
    10d6:	2d 83       	std	Y+5, r18	; 0x05
    10d8:	4d 81       	ldd	r20, Y+5	; 0x05
    10da:	5e 81       	ldd	r21, Y+6	; 0x06
    10dc:	41 30       	cpi	r20, 0x01	; 1
    10de:	51 05       	cpc	r21, r1
    10e0:	d9 f0       	breq	.+54     	; 0x1118 <GPIO_readPin+0x5c>
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	91 05       	cpc	r25, r1
    10ea:	34 f4       	brge	.+12     	; 0x10f8 <GPIO_readPin+0x3c>
    10ec:	2d 81       	ldd	r18, Y+5	; 0x05
    10ee:	3e 81       	ldd	r19, Y+6	; 0x06
    10f0:	21 15       	cp	r18, r1
    10f2:	31 05       	cpc	r19, r1
    10f4:	61 f0       	breq	.+24     	; 0x110e <GPIO_readPin+0x52>
    10f6:	1e c0       	rjmp	.+60     	; 0x1134 <GPIO_readPin+0x78>
    10f8:	4d 81       	ldd	r20, Y+5	; 0x05
    10fa:	5e 81       	ldd	r21, Y+6	; 0x06
    10fc:	42 30       	cpi	r20, 0x02	; 2
    10fe:	51 05       	cpc	r21, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_readPin+0x66>
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	81 f0       	breq	.+32     	; 0x112c <GPIO_readPin+0x70>
    110c:	13 c0       	rjmp	.+38     	; 0x1134 <GPIO_readPin+0x78>
	 {
		 case PORTA_ID:
			ptr = &PINA;
    110e:	89 e3       	ldi	r24, 0x39	; 57
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	0e c0       	rjmp	.+28     	; 0x1134 <GPIO_readPin+0x78>
			break;
		case PORTB_ID:
			ptr = &PINB;
    1118:	86 e3       	ldi	r24, 0x36	; 54
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <GPIO_readPin+0x78>
			break;
		case PORTC_ID:
			ptr = &PINC;
    1122:	83 e3       	ldi	r24, 0x33	; 51
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <GPIO_readPin+0x78>
			break;
		case PORTD_ID:
			ptr = &PIND;
    112c:	80 e3       	ldi	r24, 0x30	; 48
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	 }
	 return GET_BIT(*ptr,pinId);
    1134:	e9 81       	ldd	r30, Y+1	; 0x01
    1136:	fa 81       	ldd	r31, Y+2	; 0x02
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_readPin+0x92>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	2a 95       	dec	r18
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_readPin+0x8e>
    1152:	9a 01       	movw	r18, r20
    1154:	28 23       	and	r18, r24
    1156:	39 23       	and	r19, r25
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <GPIO_readPin+0xaa>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <GPIO_readPin+0xa6>
    116a:	ca 01       	movw	r24, r20
 }
    116c:	26 96       	adiw	r28, 0x06	; 6
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <GPIO_writePin>:
 * params(out): None
 * desciption: this function to write value to a pin
 * */

void GPIO_writePin(GPIO_PortId portId,GPIO_PinId pinId,uint8 value)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	27 97       	sbiw	r28, 0x07	; 7
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	8b 83       	std	Y+3, r24	; 0x03
    1194:	6c 83       	std	Y+4, r22	; 0x04
    1196:	4d 83       	std	Y+5, r20	; 0x05
	 volatile uint8* ptr;
	 switch(portId)
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	3f 83       	std	Y+7, r19	; 0x07
    11a0:	2e 83       	std	Y+6, r18	; 0x06
    11a2:	8e 81       	ldd	r24, Y+6	; 0x06
    11a4:	9f 81       	ldd	r25, Y+7	; 0x07
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	91 05       	cpc	r25, r1
    11aa:	d1 f0       	breq	.+52     	; 0x11e0 <GPIO_writePin+0x62>
    11ac:	2e 81       	ldd	r18, Y+6	; 0x06
    11ae:	3f 81       	ldd	r19, Y+7	; 0x07
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	2c f4       	brge	.+10     	; 0x11c0 <GPIO_writePin+0x42>
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <GPIO_writePin+0x58>
    11be:	1e c0       	rjmp	.+60     	; 0x11fc <GPIO_writePin+0x7e>
    11c0:	2e 81       	ldd	r18, Y+6	; 0x06
    11c2:	3f 81       	ldd	r19, Y+7	; 0x07
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	81 f0       	breq	.+32     	; 0x11ea <GPIO_writePin+0x6c>
    11ca:	8e 81       	ldd	r24, Y+6	; 0x06
    11cc:	9f 81       	ldd	r25, Y+7	; 0x07
    11ce:	83 30       	cpi	r24, 0x03	; 3
    11d0:	91 05       	cpc	r25, r1
    11d2:	81 f0       	breq	.+32     	; 0x11f4 <GPIO_writePin+0x76>
    11d4:	13 c0       	rjmp	.+38     	; 0x11fc <GPIO_writePin+0x7e>
	 {
		 case PORTA_ID:
			ptr = &PORTA;
    11d6:	8b e3       	ldi	r24, 0x3B	; 59
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	0e c0       	rjmp	.+28     	; 0x11fc <GPIO_writePin+0x7e>
			break;
		case PORTB_ID:
			ptr = &PORTB;
    11e0:	88 e3       	ldi	r24, 0x38	; 56
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	09 c0       	rjmp	.+18     	; 0x11fc <GPIO_writePin+0x7e>
			break;
		case PORTC_ID:
			ptr = &PORTC;
    11ea:	85 e3       	ldi	r24, 0x35	; 53
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	04 c0       	rjmp	.+8      	; 0x11fc <GPIO_writePin+0x7e>
			break;
		case PORTD_ID:
			ptr = &PORTD;
    11f4:	82 e3       	ldi	r24, 0x32	; 50
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	 }
	 if(value == LOGIC_HIGH){
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	a1 f4       	brne	.+40     	; 0x122a <GPIO_writePin+0xac>
		 SET_BIT(*ptr,pinId);
    1202:	e9 81       	ldd	r30, Y+1	; 0x01
    1204:	fa 81       	ldd	r31, Y+2	; 0x02
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <GPIO_writePin+0x9e>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <GPIO_writePin+0x9a>
    1220:	84 2b       	or	r24, r20
    1222:	e9 81       	ldd	r30, Y+1	; 0x01
    1224:	fa 81       	ldd	r31, Y+2	; 0x02
    1226:	80 83       	st	Z, r24
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <GPIO_writePin+0xd4>
	 }
	 else{
		 CLEAR_BIT(*ptr,pinId);
    122a:	e9 81       	ldd	r30, Y+1	; 0x01
    122c:	fa 81       	ldd	r31, Y+2	; 0x02
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_writePin+0xc6>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_writePin+0xc2>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	e9 81       	ldd	r30, Y+1	; 0x01
    124e:	fa 81       	ldd	r31, Y+2	; 0x02
    1250:	80 83       	st	Z, r24
	 }
}
    1252:	27 96       	adiw	r28, 0x07	; 7
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <GPIO_readPort>:
 * params(out): None
 * desciption: this function to read value of a port
 * */

uint8 GPIO_readPort(GPIO_PortId portId)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <GPIO_readPort+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <GPIO_readPort+0x8>
    126c:	0f 92       	push	r0
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8* ptr;
	 switch(portId)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3d 83       	std	Y+5, r19	; 0x05
    127c:	2c 83       	std	Y+4, r18	; 0x04
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	91 05       	cpc	r25, r1
    1286:	d1 f0       	breq	.+52     	; 0x12bc <GPIO_readPort+0x58>
    1288:	2c 81       	ldd	r18, Y+4	; 0x04
    128a:	3d 81       	ldd	r19, Y+5	; 0x05
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	2c f4       	brge	.+10     	; 0x129c <GPIO_readPort+0x38>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	61 f0       	breq	.+24     	; 0x12b2 <GPIO_readPort+0x4e>
    129a:	1e c0       	rjmp	.+60     	; 0x12d8 <GPIO_readPort+0x74>
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	3d 81       	ldd	r19, Y+5	; 0x05
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	81 f0       	breq	.+32     	; 0x12c6 <GPIO_readPort+0x62>
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	91 05       	cpc	r25, r1
    12ae:	81 f0       	breq	.+32     	; 0x12d0 <GPIO_readPort+0x6c>
    12b0:	13 c0       	rjmp	.+38     	; 0x12d8 <GPIO_readPort+0x74>
	 {
		 case PORTA_ID:
			ptr = &PINA;
    12b2:	89 e3       	ldi	r24, 0x39	; 57
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	0e c0       	rjmp	.+28     	; 0x12d8 <GPIO_readPort+0x74>
			break;
		case PORTB_ID:
			ptr = &PINB;
    12bc:	86 e3       	ldi	r24, 0x36	; 54
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9a 83       	std	Y+2, r25	; 0x02
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	09 c0       	rjmp	.+18     	; 0x12d8 <GPIO_readPort+0x74>
			break;
		case PORTC_ID:
			ptr = &PINC;
    12c6:	83 e3       	ldi	r24, 0x33	; 51
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <GPIO_readPort+0x74>
			break;
		case PORTD_ID:
			ptr = &PIND;
    12d0:	80 e3       	ldi	r24, 0x30	; 48
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9a 83       	std	Y+2, r25	; 0x02
    12d6:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	 }
	 return *ptr;
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	80 81       	ld	r24, Z
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <GPIO_writePort>:
 * params(out): None
 * desciption: this function to write value of a port
 * */

void GPIO_writePort(GPIO_PortId portId,uint8 value)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <GPIO_writePort+0x6>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <GPIO_writePort+0x8>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <GPIO_writePort+0xa>
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	6c 83       	std	Y+4, r22	; 0x04
	 volatile uint8* ptr;
	 switch(portId)
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3e 83       	std	Y+6, r19	; 0x06
    1308:	2d 83       	std	Y+5, r18	; 0x05
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <GPIO_writePort+0x5a>
    1314:	2d 81       	ldd	r18, Y+5	; 0x05
    1316:	3e 81       	ldd	r19, Y+6	; 0x06
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <GPIO_writePort+0x3a>
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <GPIO_writePort+0x50>
    1326:	1e c0       	rjmp	.+60     	; 0x1364 <GPIO_writePort+0x76>
    1328:	2d 81       	ldd	r18, Y+5	; 0x05
    132a:	3e 81       	ldd	r19, Y+6	; 0x06
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <GPIO_writePort+0x64>
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <GPIO_writePort+0x6e>
    133c:	13 c0       	rjmp	.+38     	; 0x1364 <GPIO_writePort+0x76>
	 {
		 case PORTA_ID:
			ptr = &PORTA;
    133e:	8b e3       	ldi	r24, 0x3B	; 59
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	0e c0       	rjmp	.+28     	; 0x1364 <GPIO_writePort+0x76>
			break;
		case PORTB_ID:
			ptr = &PORTB;
    1348:	88 e3       	ldi	r24, 0x38	; 56
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <GPIO_writePort+0x76>
			break;
		case PORTC_ID:
			ptr = &PORTC;
    1352:	85 e3       	ldi	r24, 0x35	; 53
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <GPIO_writePort+0x76>
			break;
		case PORTD_ID:
			ptr = &PORTD;
    135c:	82 e3       	ldi	r24, 0x32	; 50
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	 }
	*ptr = value;
    1364:	e9 81       	ldd	r30, Y+1	; 0x01
    1366:	fa 81       	ldd	r31, Y+2	; 0x02
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	80 83       	st	Z, r24
}
    136c:	26 96       	adiw	r28, 0x06	; 6
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	60 97       	sbiw	r28, 0x10	; 16
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	64 e0       	ldi	r22, 0x04	; 4
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	65 e0       	ldi	r22, 0x05	; 5
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	66 e0       	ldi	r22, 0x06	; 6
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	67 e0       	ldi	r22, 0x07	; 7
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	62 e0       	ldi	r22, 0x02	; 2
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	63 e0       	ldi	r22, 0x03	; 3
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    13e2:	1f 86       	std	Y+15, r1	; 0x0f
    13e4:	b3 c0       	rjmp	.+358    	; 0x154c <KEYPAD_getPressedKey+0x1ce>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    13e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e8:	98 2f       	mov	r25, r24
    13ea:	9c 5f       	subi	r25, 0xFC	; 252
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	69 2f       	mov	r22, r25
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    13f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f8:	98 2f       	mov	r25, r24
    13fa:	9c 5f       	subi	r25, 0xFC	; 252
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	69 2f       	mov	r22, r25
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1406:	18 8a       	std	Y+16, r1	; 0x10
    1408:	92 c0       	rjmp	.+292    	; 0x152e <KEYPAD_getPressedKey+0x1b0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	68 89       	ldd	r22, Y+16	; 0x10
    140e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <GPIO_readPin>
    1412:	88 23       	and	r24, r24
    1414:	09 f0       	breq	.+2      	; 0x1418 <KEYPAD_getPressedKey+0x9a>
    1416:	88 c0       	rjmp	.+272    	; 0x1528 <KEYPAD_getPressedKey+0x1aa>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	a8 e4       	ldi	r26, 0x48	; 72
    141e:	b3 e4       	ldi	r27, 0x43	; 67
    1420:	8b 87       	std	Y+11, r24	; 0x0b
    1422:	9c 87       	std	Y+12, r25	; 0x0c
    1424:	ad 87       	std	Y+13, r26	; 0x0d
    1426:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1428:	6b 85       	ldd	r22, Y+11	; 0x0b
    142a:	7c 85       	ldd	r23, Y+12	; 0x0c
    142c:	8d 85       	ldd	r24, Y+13	; 0x0d
    142e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	4a e7       	ldi	r20, 0x7A	; 122
    1436:	53 e4       	ldi	r21, 0x43	; 67
    1438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	8f 83       	std	Y+7, r24	; 0x07
    1442:	98 87       	std	Y+8, r25	; 0x08
    1444:	a9 87       	std	Y+9, r26	; 0x09
    1446:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1448:	6f 81       	ldd	r22, Y+7	; 0x07
    144a:	78 85       	ldd	r23, Y+8	; 0x08
    144c:	89 85       	ldd	r24, Y+9	; 0x09
    144e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5f e3       	ldi	r21, 0x3F	; 63
    1458:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    145c:	88 23       	and	r24, r24
    145e:	2c f4       	brge	.+10     	; 0x146a <KEYPAD_getPressedKey+0xec>
		__ticks = 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	3f c0       	rjmp	.+126    	; 0x14e8 <KEYPAD_getPressedKey+0x16a>
	else if (__tmp > 65535)
    146a:	6f 81       	ldd	r22, Y+7	; 0x07
    146c:	78 85       	ldd	r23, Y+8	; 0x08
    146e:	89 85       	ldd	r24, Y+9	; 0x09
    1470:	9a 85       	ldd	r25, Y+10	; 0x0a
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	3f ef       	ldi	r19, 0xFF	; 255
    1476:	4f e7       	ldi	r20, 0x7F	; 127
    1478:	57 e4       	ldi	r21, 0x47	; 71
    147a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    147e:	18 16       	cp	r1, r24
    1480:	4c f5       	brge	.+82     	; 0x14d4 <KEYPAD_getPressedKey+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1482:	6b 85       	ldd	r22, Y+11	; 0x0b
    1484:	7c 85       	ldd	r23, Y+12	; 0x0c
    1486:	8d 85       	ldd	r24, Y+13	; 0x0d
    1488:	9e 85       	ldd	r25, Y+14	; 0x0e
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <KEYPAD_getPressedKey+0x14c>
    14ac:	89 e1       	ldi	r24, 0x19	; 25
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <KEYPAD_getPressedKey+0x13a>
    14bc:	9c 83       	std	Y+4, r25	; 0x04
    14be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	69 f7       	brne	.-38     	; 0x14ac <KEYPAD_getPressedKey+0x12e>
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <KEYPAD_getPressedKey+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	9e 83       	std	Y+6, r25	; 0x06
    14e6:	8d 83       	std	Y+5, r24	; 0x05
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	9a 83       	std	Y+2, r25	; 0x02
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <KEYPAD_getPressedKey+0x176>
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							_delay_ms(200);
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    14fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	98 2f       	mov	r25, r24
    150c:	88 89       	ldd	r24, Y+16	; 0x10
    150e:	89 0f       	add	r24, r25
    1510:	8f 5f       	subi	r24, 0xFF	; 255
    1512:	0e 94 ab 0a 	call	0x1556	; 0x1556 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);

		}
	}	
}
    1516:	60 96       	adiw	r28, 0x10	; 16
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1528:	88 89       	ldd	r24, Y+16	; 0x10
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	88 8b       	std	Y+16, r24	; 0x10
    152e:	88 89       	ldd	r24, Y+16	; 0x10
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	08 f4       	brcc	.+2      	; 0x1536 <KEYPAD_getPressedKey+0x1b8>
    1534:	6a cf       	rjmp	.-300    	; 0x140a <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1536:	8f 85       	ldd	r24, Y+15	; 0x0f
    1538:	98 2f       	mov	r25, r24
    153a:	9c 5f       	subi	r25, 0xFC	; 252
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	69 2f       	mov	r22, r25
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1546:	8f 85       	ldd	r24, Y+15	; 0x0f
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	8f 87       	std	Y+15, r24	; 0x0f
    154c:	8f 85       	ldd	r24, Y+15	; 0x0f
    154e:	84 30       	cpi	r24, 0x04	; 4
    1550:	08 f4       	brcc	.+2      	; 0x1554 <KEYPAD_getPressedKey+0x1d6>
    1552:	49 cf       	rjmp	.-366    	; 0x13e6 <KEYPAD_getPressedKey+0x68>
    1554:	46 cf       	rjmp	.-372    	; 0x13e2 <KEYPAD_getPressedKey+0x64>

00001556 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <KEYPAD_4x4_adjustKeyNumber+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <KEYPAD_4x4_adjustKeyNumber+0x8>
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1564:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3c 83       	std	Y+4, r19	; 0x04
    156e:	2b 83       	std	Y+3, r18	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <KEYPAD_4x4_adjustKeyNumber+0x26>
    157a:	6f c0       	rjmp	.+222    	; 0x165a <KEYPAD_4x4_adjustKeyNumber+0x104>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	29 30       	cpi	r18, 0x09	; 9
    1582:	31 05       	cpc	r19, r1
    1584:	54 f5       	brge	.+84     	; 0x15da <KEYPAD_4x4_adjustKeyNumber+0x84>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	91 05       	cpc	r25, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1590:	58 c0       	rjmp	.+176    	; 0x1642 <KEYPAD_4x4_adjustKeyNumber+0xec>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	25 30       	cpi	r18, 0x05	; 5
    1598:	31 05       	cpc	r19, r1
    159a:	94 f4       	brge	.+36     	; 0x15c0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    15a6:	47 c0       	rjmp	.+142    	; 0x1636 <KEYPAD_4x4_adjustKeyNumber+0xe0>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	23 30       	cpi	r18, 0x03	; 3
    15ae:	31 05       	cpc	r19, r1
    15b0:	0c f0       	brlt	.+2      	; 0x15b4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    15b2:	44 c0       	rjmp	.+136    	; 0x163c <KEYPAD_4x4_adjustKeyNumber+0xe6>
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	91 05       	cpc	r25, r1
    15bc:	c9 f1       	breq	.+114    	; 0x1630 <KEYPAD_4x4_adjustKeyNumber+0xda>
    15be:	67 c0       	rjmp	.+206    	; 0x168e <KEYPAD_4x4_adjustKeyNumber+0x138>
    15c0:	2b 81       	ldd	r18, Y+3	; 0x03
    15c2:	3c 81       	ldd	r19, Y+4	; 0x04
    15c4:	26 30       	cpi	r18, 0x06	; 6
    15c6:	31 05       	cpc	r19, r1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <KEYPAD_4x4_adjustKeyNumber+0x76>
    15ca:	41 c0       	rjmp	.+130    	; 0x164e <KEYPAD_4x4_adjustKeyNumber+0xf8>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	87 30       	cpi	r24, 0x07	; 7
    15d2:	91 05       	cpc	r25, r1
    15d4:	0c f0       	brlt	.+2      	; 0x15d8 <KEYPAD_4x4_adjustKeyNumber+0x82>
    15d6:	3e c0       	rjmp	.+124    	; 0x1654 <KEYPAD_4x4_adjustKeyNumber+0xfe>
    15d8:	37 c0       	rjmp	.+110    	; 0x1648 <KEYPAD_4x4_adjustKeyNumber+0xf2>
    15da:	2b 81       	ldd	r18, Y+3	; 0x03
    15dc:	3c 81       	ldd	r19, Y+4	; 0x04
    15de:	2c 30       	cpi	r18, 0x0C	; 12
    15e0:	31 05       	cpc	r19, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <KEYPAD_4x4_adjustKeyNumber+0x90>
    15e4:	45 c0       	rjmp	.+138    	; 0x1670 <KEYPAD_4x4_adjustKeyNumber+0x11a>
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	8d 30       	cpi	r24, 0x0D	; 13
    15ec:	91 05       	cpc	r25, r1
    15ee:	5c f4       	brge	.+22     	; 0x1606 <KEYPAD_4x4_adjustKeyNumber+0xb0>
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	3c 81       	ldd	r19, Y+4	; 0x04
    15f4:	2a 30       	cpi	r18, 0x0A	; 10
    15f6:	31 05       	cpc	r19, r1
    15f8:	a9 f1       	breq	.+106    	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x10e>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	8b 30       	cpi	r24, 0x0B	; 11
    1600:	91 05       	cpc	r25, r1
    1602:	9c f5       	brge	.+102    	; 0x166a <KEYPAD_4x4_adjustKeyNumber+0x114>
    1604:	2c c0       	rjmp	.+88     	; 0x165e <KEYPAD_4x4_adjustKeyNumber+0x108>
    1606:	2b 81       	ldd	r18, Y+3	; 0x03
    1608:	3c 81       	ldd	r19, Y+4	; 0x04
    160a:	2e 30       	cpi	r18, 0x0E	; 14
    160c:	31 05       	cpc	r19, r1
    160e:	b1 f1       	breq	.+108    	; 0x167c <KEYPAD_4x4_adjustKeyNumber+0x126>
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	8e 30       	cpi	r24, 0x0E	; 14
    1616:	91 05       	cpc	r25, r1
    1618:	74 f1       	brlt	.+92     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x120>
    161a:	2b 81       	ldd	r18, Y+3	; 0x03
    161c:	3c 81       	ldd	r19, Y+4	; 0x04
    161e:	2f 30       	cpi	r18, 0x0F	; 15
    1620:	31 05       	cpc	r19, r1
    1622:	79 f1       	breq	.+94     	; 0x1682 <KEYPAD_4x4_adjustKeyNumber+0x12c>
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	80 31       	cpi	r24, 0x10	; 16
    162a:	91 05       	cpc	r25, r1
    162c:	69 f1       	breq	.+90     	; 0x1688 <KEYPAD_4x4_adjustKeyNumber+0x132>
    162e:	2f c0       	rjmp	.+94     	; 0x168e <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
		case 1: keypad_button = 7;
    1630:	87 e0       	ldi	r24, 0x07	; 7
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	2e c0       	rjmp	.+92     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: keypad_button = 4;
    1636:	84 e0       	ldi	r24, 0x04	; 4
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	2b c0       	rjmp	.+86     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: keypad_button = 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	28 c0       	rjmp	.+80     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: keypad_button = 13; // ASCII Code of %
    1642:	8d e0       	ldi	r24, 0x0D	; 13
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	25 c0       	rjmp	.+74     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: keypad_button = 8;
    1648:	88 e0       	ldi	r24, 0x08	; 8
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	22 c0       	rjmp	.+68     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: keypad_button = 5;
    164e:	85 e0       	ldi	r24, 0x05	; 5
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	1f c0       	rjmp	.+62     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: keypad_button = 2;
    1654:	82 e0       	ldi	r24, 0x02	; 2
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	1c c0       	rjmp	.+56     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: keypad_button = 0; /* ASCII Code of '*' */
    165a:	19 82       	std	Y+1, r1	; 0x01
    165c:	1a c0       	rjmp	.+52     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: keypad_button = 9;
    165e:	89 e0       	ldi	r24, 0x09	; 9
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	17 c0       	rjmp	.+46     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: keypad_button = 6;
    1664:	86 e0       	ldi	r24, 0x06	; 6
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	14 c0       	rjmp	.+40     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: keypad_button = 3;
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	11 c0       	rjmp	.+34     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: keypad_button = '='; /* ASCII Code of '-' */
    1670:	8d e3       	ldi	r24, 0x3D	; 61
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	0e c0       	rjmp	.+28     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: keypad_button = '%';  /* ASCII of Enter */
    1676:	85 e2       	ldi	r24, 0x25	; 37
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	0b c0       	rjmp	.+22     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: keypad_button = '*';
    167c:	8a e2       	ldi	r24, 0x2A	; 42
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: keypad_button = '-'; /* ASCII Code of '=' */
    1682:	8d e2       	ldi	r24, 0x2D	; 45
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1688:	8b e2       	ldi	r24, 0x2B	; 43
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		default: keypad_button = button_number;
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1692:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	2e 97       	sbiw	r28, 0x0e	; 14
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	62 e0       	ldi	r22, 0x02	; 2
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_setupPinDirection>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a0 ea       	ldi	r26, 0xA0	; 160
    16d0:	b1 e4       	ldi	r27, 0x41	; 65
    16d2:	8b 87       	std	Y+11, r24	; 0x0b
    16d4:	9c 87       	std	Y+12, r25	; 0x0c
    16d6:	ad 87       	std	Y+13, r26	; 0x0d
    16d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16da:	6b 85       	ldd	r22, Y+11	; 0x0b
    16dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16de:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4a e7       	ldi	r20, 0x7A	; 122
    16e8:	53 e4       	ldi	r21, 0x43	; 67
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8f 83       	std	Y+7, r24	; 0x07
    16f4:	98 87       	std	Y+8, r25	; 0x08
    16f6:	a9 87       	std	Y+9, r26	; 0x09
    16f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	2c f4       	brge	.+10     	; 0x171c <LCD_init+0x7a>
		__ticks = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	3f c0       	rjmp	.+126    	; 0x179a <LCD_init+0xf8>
	else if (__tmp > 65535)
    171c:	6f 81       	ldd	r22, Y+7	; 0x07
    171e:	78 85       	ldd	r23, Y+8	; 0x08
    1720:	89 85       	ldd	r24, Y+9	; 0x09
    1722:	9a 85       	ldd	r25, Y+10	; 0x0a
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	4c f5       	brge	.+82     	; 0x1786 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	6b 85       	ldd	r22, Y+11	; 0x0b
    1736:	7c 85       	ldd	r23, Y+12	; 0x0c
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e2       	ldi	r20, 0x20	; 32
    1742:	51 e4       	ldi	r21, 0x41	; 65
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	0f c0       	rjmp	.+30     	; 0x177c <LCD_init+0xda>
    175e:	89 e1       	ldi	r24, 0x19	; 25
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9c 83       	std	Y+4, r25	; 0x04
    1764:	8b 83       	std	Y+3, r24	; 0x03
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <LCD_init+0xc8>
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	69 f7       	brne	.-38     	; 0x175e <LCD_init+0xbc>
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1786:	6f 81       	ldd	r22, Y+7	; 0x07
    1788:	78 85       	ldd	r23, Y+8	; 0x08
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <LCD_init+0x104>
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	6f ef       	ldi	r22, 0xFF	; 255
    17b2:	0e 94 16 08 	call	0x102c	; 0x102c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    17b6:	88 e3       	ldi	r24, 0x38	; 56
    17b8:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    17bc:	8c e0       	ldi	r24, 0x0C	; 12
    17be:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_sendCommand>
}
    17c8:	2e 96       	adiw	r28, 0x0e	; 14
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	e9 97       	sbiw	r28, 0x39	; 57
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e8       	ldi	r26, 0x80	; 128
    1800:	bf e3       	ldi	r27, 0x3F	; 63
    1802:	8d ab       	std	Y+53, r24	; 0x35
    1804:	9e ab       	std	Y+54, r25	; 0x36
    1806:	af ab       	std	Y+55, r26	; 0x37
    1808:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180a:	6d a9       	ldd	r22, Y+53	; 0x35
    180c:	7e a9       	ldd	r23, Y+54	; 0x36
    180e:	8f a9       	ldd	r24, Y+55	; 0x37
    1810:	98 ad       	ldd	r25, Y+56	; 0x38
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a e7       	ldi	r20, 0x7A	; 122
    1818:	53 e4       	ldi	r21, 0x43	; 67
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	89 ab       	std	Y+49, r24	; 0x31
    1824:	9a ab       	std	Y+50, r25	; 0x32
    1826:	ab ab       	std	Y+51, r26	; 0x33
    1828:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    182a:	69 a9       	ldd	r22, Y+49	; 0x31
    182c:	7a a9       	ldd	r23, Y+50	; 0x32
    182e:	8b a9       	ldd	r24, Y+51	; 0x33
    1830:	9c a9       	ldd	r25, Y+52	; 0x34
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183e:	88 23       	and	r24, r24
    1840:	2c f4       	brge	.+10     	; 0x184c <LCD_sendCommand+0x72>
		__ticks = 1;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	98 ab       	std	Y+48, r25	; 0x30
    1848:	8f a7       	std	Y+47, r24	; 0x2f
    184a:	3f c0       	rjmp	.+126    	; 0x18ca <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    184c:	69 a9       	ldd	r22, Y+49	; 0x31
    184e:	7a a9       	ldd	r23, Y+50	; 0x32
    1850:	8b a9       	ldd	r24, Y+51	; 0x33
    1852:	9c a9       	ldd	r25, Y+52	; 0x34
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	3f ef       	ldi	r19, 0xFF	; 255
    1858:	4f e7       	ldi	r20, 0x7F	; 127
    185a:	57 e4       	ldi	r21, 0x47	; 71
    185c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1860:	18 16       	cp	r1, r24
    1862:	4c f5       	brge	.+82     	; 0x18b6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1864:	6d a9       	ldd	r22, Y+53	; 0x35
    1866:	7e a9       	ldd	r23, Y+54	; 0x36
    1868:	8f a9       	ldd	r24, Y+55	; 0x37
    186a:	98 ad       	ldd	r25, Y+56	; 0x38
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e2       	ldi	r20, 0x20	; 32
    1872:	51 e4       	ldi	r21, 0x41	; 65
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	98 ab       	std	Y+48, r25	; 0x30
    188a:	8f a7       	std	Y+47, r24	; 0x2f
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <LCD_sendCommand+0xd2>
    188e:	89 e1       	ldi	r24, 0x19	; 25
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9e a7       	std	Y+46, r25	; 0x2e
    1894:	8d a7       	std	Y+45, r24	; 0x2d
    1896:	8d a5       	ldd	r24, Y+45	; 0x2d
    1898:	9e a5       	ldd	r25, Y+46	; 0x2e
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <LCD_sendCommand+0xc0>
    189e:	9e a7       	std	Y+46, r25	; 0x2e
    18a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a4:	98 a9       	ldd	r25, Y+48	; 0x30
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	98 ab       	std	Y+48, r25	; 0x30
    18aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ae:	98 a9       	ldd	r25, Y+48	; 0x30
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	69 f7       	brne	.-38     	; 0x188e <LCD_sendCommand+0xb4>
    18b4:	14 c0       	rjmp	.+40     	; 0x18de <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	69 a9       	ldd	r22, Y+49	; 0x31
    18b8:	7a a9       	ldd	r23, Y+50	; 0x32
    18ba:	8b a9       	ldd	r24, Y+51	; 0x33
    18bc:	9c a9       	ldd	r25, Y+52	; 0x34
    18be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	98 ab       	std	Y+48, r25	; 0x30
    18c8:	8f a7       	std	Y+47, r24	; 0x2f
    18ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    18cc:	98 a9       	ldd	r25, Y+48	; 0x30
    18ce:	9c a7       	std	Y+44, r25	; 0x2c
    18d0:	8b a7       	std	Y+43, r24	; 0x2b
    18d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    18d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <LCD_sendCommand+0xfc>
    18da:	9c a7       	std	Y+44, r25	; 0x2c
    18dc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	62 e0       	ldi	r22, 0x02	; 2
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e8       	ldi	r26, 0x80	; 128
    18ee:	bf e3       	ldi	r27, 0x3F	; 63
    18f0:	8f a3       	std	Y+39, r24	; 0x27
    18f2:	98 a7       	std	Y+40, r25	; 0x28
    18f4:	a9 a7       	std	Y+41, r26	; 0x29
    18f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	6f a1       	ldd	r22, Y+39	; 0x27
    18fa:	78 a5       	ldd	r23, Y+40	; 0x28
    18fc:	89 a5       	ldd	r24, Y+41	; 0x29
    18fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a e7       	ldi	r20, 0x7A	; 122
    1906:	53 e4       	ldi	r21, 0x43	; 67
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8b a3       	std	Y+35, r24	; 0x23
    1912:	9c a3       	std	Y+36, r25	; 0x24
    1914:	ad a3       	std	Y+37, r26	; 0x25
    1916:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1918:	6b a1       	ldd	r22, Y+35	; 0x23
    191a:	7c a1       	ldd	r23, Y+36	; 0x24
    191c:	8d a1       	ldd	r24, Y+37	; 0x25
    191e:	9e a1       	ldd	r25, Y+38	; 0x26
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	2c f4       	brge	.+10     	; 0x193a <LCD_sendCommand+0x160>
		__ticks = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9a a3       	std	Y+34, r25	; 0x22
    1936:	89 a3       	std	Y+33, r24	; 0x21
    1938:	3f c0       	rjmp	.+126    	; 0x19b8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    193a:	6b a1       	ldd	r22, Y+35	; 0x23
    193c:	7c a1       	ldd	r23, Y+36	; 0x24
    193e:	8d a1       	ldd	r24, Y+37	; 0x25
    1940:	9e a1       	ldd	r25, Y+38	; 0x26
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	4c f5       	brge	.+82     	; 0x19a4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	6f a1       	ldd	r22, Y+39	; 0x27
    1954:	78 a5       	ldd	r23, Y+40	; 0x28
    1956:	89 a5       	ldd	r24, Y+41	; 0x29
    1958:	9a a5       	ldd	r25, Y+42	; 0x2a
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9a a3       	std	Y+34, r25	; 0x22
    1978:	89 a3       	std	Y+33, r24	; 0x21
    197a:	0f c0       	rjmp	.+30     	; 0x199a <LCD_sendCommand+0x1c0>
    197c:	89 e1       	ldi	r24, 0x19	; 25
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	98 a3       	std	Y+32, r25	; 0x20
    1982:	8f 8f       	std	Y+31, r24	; 0x1f
    1984:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1986:	98 a1       	ldd	r25, Y+32	; 0x20
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <LCD_sendCommand+0x1ae>
    198c:	98 a3       	std	Y+32, r25	; 0x20
    198e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	89 a1       	ldd	r24, Y+33	; 0x21
    1992:	9a a1       	ldd	r25, Y+34	; 0x22
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9a a3       	std	Y+34, r25	; 0x22
    1998:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	89 a1       	ldd	r24, Y+33	; 0x21
    199c:	9a a1       	ldd	r25, Y+34	; 0x22
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	69 f7       	brne	.-38     	; 0x197c <LCD_sendCommand+0x1a2>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	6b a1       	ldd	r22, Y+35	; 0x23
    19a6:	7c a1       	ldd	r23, Y+36	; 0x24
    19a8:	8d a1       	ldd	r24, Y+37	; 0x25
    19aa:	9e a1       	ldd	r25, Y+38	; 0x26
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9a a3       	std	Y+34, r25	; 0x22
    19b6:	89 a3       	std	Y+33, r24	; 0x21
    19b8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ba:	9a a1       	ldd	r25, Y+34	; 0x22
    19bc:	9e 8f       	std	Y+30, r25	; 0x1e
    19be:	8d 8f       	std	Y+29, r24	; 0x1d
    19c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <LCD_sendCommand+0x1ea>
    19c8:	9e 8f       	std	Y+30, r25	; 0x1e
    19ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	69 ad       	ldd	r22, Y+57	; 0x39
    19d0:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePort>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a0 e8       	ldi	r26, 0x80	; 128
    19da:	bf e3       	ldi	r27, 0x3F	; 63
    19dc:	89 8f       	std	Y+25, r24	; 0x19
    19de:	9a 8f       	std	Y+26, r25	; 0x1a
    19e0:	ab 8f       	std	Y+27, r26	; 0x1b
    19e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	69 8d       	ldd	r22, Y+25	; 0x19
    19e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a e7       	ldi	r20, 0x7A	; 122
    19f2:	53 e4       	ldi	r21, 0x43	; 67
    19f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	8d 8b       	std	Y+21, r24	; 0x15
    19fe:	9e 8b       	std	Y+22, r25	; 0x16
    1a00:	af 8b       	std	Y+23, r26	; 0x17
    1a02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a04:	6d 89       	ldd	r22, Y+21	; 0x15
    1a06:	7e 89       	ldd	r23, Y+22	; 0x16
    1a08:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e8       	ldi	r20, 0x80	; 128
    1a12:	5f e3       	ldi	r21, 0x3F	; 63
    1a14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a18:	88 23       	and	r24, r24
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9c 8b       	std	Y+20, r25	; 0x14
    1a22:	8b 8b       	std	Y+19, r24	; 0x13
    1a24:	3f c0       	rjmp	.+126    	; 0x1aa4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a26:	6d 89       	ldd	r22, Y+21	; 0x15
    1a28:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	4c f5       	brge	.+82     	; 0x1a90 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9c 8b       	std	Y+20, r25	; 0x14
    1a64:	8b 8b       	std	Y+19, r24	; 0x13
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <LCD_sendCommand+0x2ac>
    1a68:	89 e1       	ldi	r24, 0x19	; 25
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9a 8b       	std	Y+18, r25	; 0x12
    1a6e:	89 8b       	std	Y+17, r24	; 0x11
    1a70:	89 89       	ldd	r24, Y+17	; 0x11
    1a72:	9a 89       	ldd	r25, Y+18	; 0x12
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <LCD_sendCommand+0x29a>
    1a78:	9a 8b       	std	Y+18, r25	; 0x12
    1a7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	9c 8b       	std	Y+20, r25	; 0x14
    1a84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	8b 89       	ldd	r24, Y+19	; 0x13
    1a88:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	69 f7       	brne	.-38     	; 0x1a68 <LCD_sendCommand+0x28e>
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a90:	6d 89       	ldd	r22, Y+21	; 0x15
    1a92:	7e 89       	ldd	r23, Y+22	; 0x16
    1a94:	8f 89       	ldd	r24, Y+23	; 0x17
    1a96:	98 8d       	ldd	r25, Y+24	; 0x18
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9c 8b       	std	Y+20, r25	; 0x14
    1aa2:	8b 8b       	std	Y+19, r24	; 0x13
    1aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa8:	98 8b       	std	Y+16, r25	; 0x10
    1aaa:	8f 87       	std	Y+15, r24	; 0x0f
    1aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aae:	98 89       	ldd	r25, Y+16	; 0x10
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_sendCommand+0x2d6>
    1ab4:	98 8b       	std	Y+16, r25	; 0x10
    1ab6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ab8:	82 e0       	ldi	r24, 0x02	; 2
    1aba:	62 e0       	ldi	r22, 0x02	; 2
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e8       	ldi	r26, 0x80	; 128
    1ac8:	bf e3       	ldi	r27, 0x3F	; 63
    1aca:	8b 87       	std	Y+11, r24	; 0x0b
    1acc:	9c 87       	std	Y+12, r25	; 0x0c
    1ace:	ad 87       	std	Y+13, r26	; 0x0d
    1ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4a e7       	ldi	r20, 0x7A	; 122
    1ae0:	53 e4       	ldi	r21, 0x43	; 67
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	8f 83       	std	Y+7, r24	; 0x07
    1aec:	98 87       	std	Y+8, r25	; 0x08
    1aee:	a9 87       	std	Y+9, r26	; 0x09
    1af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af2:	6f 81       	ldd	r22, Y+7	; 0x07
    1af4:	78 85       	ldd	r23, Y+8	; 0x08
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1b14:	6f 81       	ldd	r22, Y+7	; 0x07
    1b16:	78 85       	ldd	r23, Y+8	; 0x08
    1b18:	89 85       	ldd	r24, Y+9	; 0x09
    1b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	3f ef       	ldi	r19, 0xFF	; 255
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	57 e4       	ldi	r21, 0x47	; 71
    1b24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	4c f5       	brge	.+82     	; 0x1b7e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e2       	ldi	r20, 0x20	; 32
    1b3a:	51 e4       	ldi	r21, 0x41	; 65
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <LCD_sendCommand+0x39a>
    1b56:	89 e1       	ldi	r24, 0x19	; 25
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9c 83       	std	Y+4, r25	; 0x04
    1b5c:	8b 83       	std	Y+3, r24	; 0x03
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <LCD_sendCommand+0x388>
    1b66:	9c 83       	std	Y+4, r25	; 0x04
    1b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	69 f7       	brne	.-38     	; 0x1b56 <LCD_sendCommand+0x37c>
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9e 83       	std	Y+6, r25	; 0x06
    1b90:	8d 83       	std	Y+5, r24	; 0x05
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	9a 83       	std	Y+2, r25	; 0x02
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_sendCommand+0x3c4>
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ba6:	e9 96       	adiw	r28, 0x39	; 57
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	e9 97       	sbiw	r28, 0x39	; 57
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	41 e0       	ldi	r20, 0x01	; 1
    1bd4:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e8       	ldi	r26, 0x80	; 128
    1bde:	bf e3       	ldi	r27, 0x3F	; 63
    1be0:	8d ab       	std	Y+53, r24	; 0x35
    1be2:	9e ab       	std	Y+54, r25	; 0x36
    1be4:	af ab       	std	Y+55, r26	; 0x37
    1be6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bea:	7e a9       	ldd	r23, Y+54	; 0x36
    1bec:	8f a9       	ldd	r24, Y+55	; 0x37
    1bee:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a e7       	ldi	r20, 0x7A	; 122
    1bf6:	53 e4       	ldi	r21, 0x43	; 67
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	89 ab       	std	Y+49, r24	; 0x31
    1c02:	9a ab       	std	Y+50, r25	; 0x32
    1c04:	ab ab       	std	Y+51, r26	; 0x33
    1c06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c08:	69 a9       	ldd	r22, Y+49	; 0x31
    1c0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	2c f4       	brge	.+10     	; 0x1c2a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	98 ab       	std	Y+48, r25	; 0x30
    1c26:	8f a7       	std	Y+47, r24	; 0x2f
    1c28:	3f c0       	rjmp	.+126    	; 0x1ca8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c30:	9c a9       	ldd	r25, Y+52	; 0x34
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	4c f5       	brge	.+82     	; 0x1c94 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	6d a9       	ldd	r22, Y+53	; 0x35
    1c44:	7e a9       	ldd	r23, Y+54	; 0x36
    1c46:	8f a9       	ldd	r24, Y+55	; 0x37
    1c48:	98 ad       	ldd	r25, Y+56	; 0x38
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e2       	ldi	r20, 0x20	; 32
    1c50:	51 e4       	ldi	r21, 0x41	; 65
    1c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	98 ab       	std	Y+48, r25	; 0x30
    1c68:	8f a7       	std	Y+47, r24	; 0x2f
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <LCD_displayCharacter+0xd2>
    1c6c:	89 e1       	ldi	r24, 0x19	; 25
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9e a7       	std	Y+46, r25	; 0x2e
    1c72:	8d a7       	std	Y+45, r24	; 0x2d
    1c74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_displayCharacter+0xc0>
    1c7c:	9e a7       	std	Y+46, r25	; 0x2e
    1c7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c82:	98 a9       	ldd	r25, Y+48	; 0x30
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	98 ab       	std	Y+48, r25	; 0x30
    1c88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <LCD_displayCharacter+0xb4>
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c94:	69 a9       	ldd	r22, Y+49	; 0x31
    1c96:	7a a9       	ldd	r23, Y+50	; 0x32
    1c98:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	98 ab       	std	Y+48, r25	; 0x30
    1ca6:	8f a7       	std	Y+47, r24	; 0x2f
    1ca8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1caa:	98 a9       	ldd	r25, Y+48	; 0x30
    1cac:	9c a7       	std	Y+44, r25	; 0x2c
    1cae:	8b a7       	std	Y+43, r24	; 0x2b
    1cb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <LCD_displayCharacter+0xfc>
    1cb8:	9c a7       	std	Y+44, r25	; 0x2c
    1cba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	62 e0       	ldi	r22, 0x02	; 2
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 e8       	ldi	r26, 0x80	; 128
    1ccc:	bf e3       	ldi	r27, 0x3F	; 63
    1cce:	8f a3       	std	Y+39, r24	; 0x27
    1cd0:	98 a7       	std	Y+40, r25	; 0x28
    1cd2:	a9 a7       	std	Y+41, r26	; 0x29
    1cd4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cda:	89 a5       	ldd	r24, Y+41	; 0x29
    1cdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a e7       	ldi	r20, 0x7A	; 122
    1ce4:	53 e4       	ldi	r21, 0x43	; 67
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8b a3       	std	Y+35, r24	; 0x23
    1cf0:	9c a3       	std	Y+36, r25	; 0x24
    1cf2:	ad a3       	std	Y+37, r26	; 0x25
    1cf4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9a a3       	std	Y+34, r25	; 0x22
    1d14:	89 a3       	std	Y+33, r24	; 0x21
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1d18:	6b a1       	ldd	r22, Y+35	; 0x23
    1d1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	6f a1       	ldd	r22, Y+39	; 0x27
    1d32:	78 a5       	ldd	r23, Y+40	; 0x28
    1d34:	89 a5       	ldd	r24, Y+41	; 0x29
    1d36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9a a3       	std	Y+34, r25	; 0x22
    1d56:	89 a3       	std	Y+33, r24	; 0x21
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <LCD_displayCharacter+0x1c0>
    1d5a:	89 e1       	ldi	r24, 0x19	; 25
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	98 a3       	std	Y+32, r25	; 0x20
    1d60:	8f 8f       	std	Y+31, r24	; 0x1f
    1d62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d64:	98 a1       	ldd	r25, Y+32	; 0x20
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_displayCharacter+0x1ae>
    1d6a:	98 a3       	std	Y+32, r25	; 0x20
    1d6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d70:	9a a1       	ldd	r25, Y+34	; 0x22
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	9a a3       	std	Y+34, r25	; 0x22
    1d76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <LCD_displayCharacter+0x1a2>
    1d80:	14 c0       	rjmp	.+40     	; 0x1daa <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	6b a1       	ldd	r22, Y+35	; 0x23
    1d84:	7c a1       	ldd	r23, Y+36	; 0x24
    1d86:	8d a1       	ldd	r24, Y+37	; 0x25
    1d88:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9a a3       	std	Y+34, r25	; 0x22
    1d94:	89 a3       	std	Y+33, r24	; 0x21
    1d96:	89 a1       	ldd	r24, Y+33	; 0x21
    1d98:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_displayCharacter+0x1ea>
    1da6:	9e 8f       	std	Y+30, r25	; 0x1e
    1da8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	69 ad       	ldd	r22, Y+57	; 0x39
    1dae:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePort>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e8       	ldi	r26, 0x80	; 128
    1db8:	bf e3       	ldi	r27, 0x3F	; 63
    1dba:	89 8f       	std	Y+25, r24	; 0x19
    1dbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1dbe:	ab 8f       	std	Y+27, r26	; 0x1b
    1dc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a e7       	ldi	r20, 0x7A	; 122
    1dd0:	53 e4       	ldi	r21, 0x43	; 67
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8d 8b       	std	Y+21, r24	; 0x15
    1ddc:	9e 8b       	std	Y+22, r25	; 0x16
    1dde:	af 8b       	std	Y+23, r26	; 0x17
    1de0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1de2:	6d 89       	ldd	r22, Y+21	; 0x15
    1de4:	7e 89       	ldd	r23, Y+22	; 0x16
    1de6:	8f 89       	ldd	r24, Y+23	; 0x17
    1de8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9c 8b       	std	Y+20, r25	; 0x14
    1e00:	8b 8b       	std	Y+19, r24	; 0x13
    1e02:	3f c0       	rjmp	.+126    	; 0x1e82 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1e04:	6d 89       	ldd	r22, Y+21	; 0x15
    1e06:	7e 89       	ldd	r23, Y+22	; 0x16
    1e08:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	4c f5       	brge	.+82     	; 0x1e6e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <LCD_displayCharacter+0x2ac>
    1e46:	89 e1       	ldi	r24, 0x19	; 25
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9a 8b       	std	Y+18, r25	; 0x12
    1e4c:	89 8b       	std	Y+17, r24	; 0x11
    1e4e:	89 89       	ldd	r24, Y+17	; 0x11
    1e50:	9a 89       	ldd	r25, Y+18	; 0x12
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_displayCharacter+0x29a>
    1e56:	9a 8b       	std	Y+18, r25	; 0x12
    1e58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	9c 8b       	std	Y+20, r25	; 0x14
    1e62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	8b 89       	ldd	r24, Y+19	; 0x13
    1e66:	9c 89       	ldd	r25, Y+20	; 0x14
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <LCD_displayCharacter+0x28e>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e70:	7e 89       	ldd	r23, Y+22	; 0x16
    1e72:	8f 89       	ldd	r24, Y+23	; 0x17
    1e74:	98 8d       	ldd	r25, Y+24	; 0x18
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9c 8b       	std	Y+20, r25	; 0x14
    1e80:	8b 8b       	std	Y+19, r24	; 0x13
    1e82:	8b 89       	ldd	r24, Y+19	; 0x13
    1e84:	9c 89       	ldd	r25, Y+20	; 0x14
    1e86:	98 8b       	std	Y+16, r25	; 0x10
    1e88:	8f 87       	std	Y+15, r24	; 0x0f
    1e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8c:	98 89       	ldd	r25, Y+16	; 0x10
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <LCD_displayCharacter+0x2d6>
    1e92:	98 8b       	std	Y+16, r25	; 0x10
    1e94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	62 e0       	ldi	r22, 0x02	; 2
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	0e 94 bf 08 	call	0x117e	; 0x117e <GPIO_writePin>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a0 e8       	ldi	r26, 0x80	; 128
    1ea6:	bf e3       	ldi	r27, 0x3F	; 63
    1ea8:	8b 87       	std	Y+11, r24	; 0x0b
    1eaa:	9c 87       	std	Y+12, r25	; 0x0c
    1eac:	ad 87       	std	Y+13, r26	; 0x0d
    1eae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a e7       	ldi	r20, 0x7A	; 122
    1ebe:	53 e4       	ldi	r21, 0x43	; 67
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8f 83       	std	Y+7, r24	; 0x07
    1eca:	98 87       	std	Y+8, r25	; 0x08
    1ecc:	a9 87       	std	Y+9, r26	; 0x09
    1ece:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed2:	78 85       	ldd	r23, Y+8	; 0x08
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	3f c0       	rjmp	.+126    	; 0x1f70 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef4:	78 85       	ldd	r23, Y+8	; 0x08
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	4c f5       	brge	.+82     	; 0x1f5c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <LCD_displayCharacter+0x39a>
    1f34:	89 e1       	ldi	r24, 0x19	; 25
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_displayCharacter+0x388>
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	9e 83       	std	Y+6, r25	; 0x06
    1f50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	8d 81       	ldd	r24, Y+5	; 0x05
    1f54:	9e 81       	ldd	r25, Y+6	; 0x06
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <LCD_displayCharacter+0x37c>
    1f5a:	14 c0       	rjmp	.+40     	; 0x1f84 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5e:	78 85       	ldd	r23, Y+8	; 0x08
    1f60:	89 85       	ldd	r24, Y+9	; 0x09
    1f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_displayCharacter+0x3c4>
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f84:	e9 96       	adiw	r28, 0x39	; 57
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <LCD_displayString+0x6>
    1f9c:	0f 92       	push	r0
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	9b 83       	std	Y+3, r25	; 0x03
    1fa4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fa6:	19 82       	std	Y+1, r1	; 0x01
    1fa8:	0e c0       	rjmp	.+28     	; 0x1fc6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	e2 0f       	add	r30, r18
    1fb8:	f3 1f       	adc	r31, r19
    1fba:	80 81       	ld	r24, Z
    1fbc:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayCharacter>
		i++;
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	e2 0f       	add	r30, r18
    1fd4:	f3 1f       	adc	r31, r19
    1fd6:	80 81       	ld	r24, Z
    1fd8:	88 23       	and	r24, r24
    1fda:	39 f7       	brne	.-50     	; 0x1faa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <LCD_moveCursor+0x6>
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <LCD_moveCursor+0x8>
    1ff0:	0f 92       	push	r0
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
    1ff8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	3d 83       	std	Y+5, r19	; 0x05
    2002:	2c 83       	std	Y+4, r18	; 0x04
    2004:	8c 81       	ldd	r24, Y+4	; 0x04
    2006:	9d 81       	ldd	r25, Y+5	; 0x05
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	91 05       	cpc	r25, r1
    200c:	c1 f0       	breq	.+48     	; 0x203e <LCD_moveCursor+0x56>
    200e:	2c 81       	ldd	r18, Y+4	; 0x04
    2010:	3d 81       	ldd	r19, Y+5	; 0x05
    2012:	22 30       	cpi	r18, 0x02	; 2
    2014:	31 05       	cpc	r19, r1
    2016:	2c f4       	brge	.+10     	; 0x2022 <LCD_moveCursor+0x3a>
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	61 f0       	breq	.+24     	; 0x2038 <LCD_moveCursor+0x50>
    2020:	19 c0       	rjmp	.+50     	; 0x2054 <LCD_moveCursor+0x6c>
    2022:	2c 81       	ldd	r18, Y+4	; 0x04
    2024:	3d 81       	ldd	r19, Y+5	; 0x05
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	69 f0       	breq	.+26     	; 0x2046 <LCD_moveCursor+0x5e>
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	9d 81       	ldd	r25, Y+5	; 0x05
    2030:	83 30       	cpi	r24, 0x03	; 3
    2032:	91 05       	cpc	r25, r1
    2034:	61 f0       	breq	.+24     	; 0x204e <LCD_moveCursor+0x66>
    2036:	0e c0       	rjmp	.+28     	; 0x2054 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	0b c0       	rjmp	.+22     	; 0x2054 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	80 5c       	subi	r24, 0xC0	; 192
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	07 c0       	rjmp	.+14     	; 0x2054 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	80 5f       	subi	r24, 0xF0	; 240
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	80 5b       	subi	r24, 0xB0	; 176
    2052:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	80 68       	ori	r24, 0x80	; 128
    2058:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_sendCommand>
}
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <LCD_displayStringRowColumn+0x6>
    2072:	00 d0       	rcall	.+0      	; 0x2074 <LCD_displayStringRowColumn+0x8>
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	6a 83       	std	Y+2, r22	; 0x02
    207c:	5c 83       	std	Y+4, r21	; 0x04
    207e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	6a 81       	ldd	r22, Y+2	; 0x02
    2084:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_displayString>
}
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	62 97       	sbiw	r28, 0x12	; 18
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	9a 8b       	std	Y+18, r25	; 0x12
    20b4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    20b6:	89 89       	ldd	r24, Y+17	; 0x11
    20b8:	9a 89       	ldd	r25, Y+18	; 0x12
    20ba:	9e 01       	movw	r18, r28
    20bc:	2f 5f       	subi	r18, 0xFF	; 255
    20be:	3f 4f       	sbci	r19, 0xFF	; 255
    20c0:	b9 01       	movw	r22, r18
    20c2:	4a e0       	ldi	r20, 0x0A	; 10
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	0e 94 de 11 	call	0x23bc	; 0x23bc <itoa>
   LCD_displayString(buff); /* Display the string */
    20ca:	ce 01       	movw	r24, r28
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_displayString>
}
    20d2:	62 96       	adiw	r28, 0x12	; 18
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_sendCommand>
}
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <readPassword>:
#include "../MCAL/timers/timer.h"
/*variables*/
uint8 ticks;
uint8 requiredTicks;
doorStatus statusOfTheDoor;
void readPassword(uint8* pass,uint8 size){
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <readPassword+0xa>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <readPassword+0xc>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9b 83       	std	Y+3, r25	; 0x03
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 index = 0;
    210e:	19 82       	std	Y+1, r1	; 0x01
    2110:	12 c0       	rjmp	.+36     	; 0x2136 <readPassword+0x3e>

	while(index < size){
		pass[index] = KEYPAD_getPressedKey();
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	9b 81       	ldd	r25, Y+3	; 0x03
    211c:	8c 01       	movw	r16, r24
    211e:	02 0f       	add	r16, r18
    2120:	13 1f       	adc	r17, r19
    2122:	0e 94 bf 09 	call	0x137e	; 0x137e <KEYPAD_getPressedKey>
    2126:	f8 01       	movw	r30, r16
    2128:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    212a:	8a e2       	ldi	r24, 0x2A	; 42
    212c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_displayCharacter>
		index++;
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	8f 5f       	subi	r24, 0xFF	; 255
    2134:	89 83       	std	Y+1, r24	; 0x01
uint8 requiredTicks;
doorStatus statusOfTheDoor;
void readPassword(uint8* pass,uint8 size){
	uint8 index = 0;

	while(index < size){
    2136:	99 81       	ldd	r25, Y+1	; 0x01
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	98 17       	cp	r25, r24
    213c:	50 f3       	brcs	.-44     	; 0x2112 <readPassword+0x1a>
		pass[index] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		index++;
	}
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	1f 91       	pop	r17
    214c:	0f 91       	pop	r16
    214e:	08 95       	ret

00002150 <main>:
#define OPEN 2
#define CHANGE 3


int main(void)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	66 97       	sbiw	r28, 0x16	; 22
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
	UART_init(9600);
    2164:	60 e8       	ldi	r22, 0x80	; 128
    2166:	75 e2       	ldi	r23, 0x25	; 37
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <UART_init>
	/*variables*/
	uint8 password[7],confirmPassword[7];
	/*init the peripherals and external devices*/
	LCD_init();
    2170:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <LCD_init>
	/*read the password first time*/
	do{
		LCD_clearScreen();
    2174:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "plz enter pass :");
    2178:	20 e6       	ldi	r18, 0x60	; 96
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	a9 01       	movw	r20, r18
    2182:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "");
    2186:	21 e7       	ldi	r18, 0x71	; 113
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	a9 01       	movw	r20, r18
    2190:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
		readPassword(password,5);
    2194:	ce 01       	movw	r24, r28
    2196:	02 96       	adiw	r24, 0x02	; 2
    2198:	65 e0       	ldi	r22, 0x05	; 5
    219a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <readPassword>
		password[5] = '#';password[6] = '\0';
    219e:	83 e2       	ldi	r24, 0x23	; 35
    21a0:	8f 83       	std	Y+7, r24	; 0x07
    21a2:	18 86       	std	Y+8, r1	; 0x08
		UART_sendString(password);
    21a4:	ce 01       	movw	r24, r28
    21a6:	02 96       	adiw	r24, 0x02	; 2
    21a8:	0e 94 37 07 	call	0xe6e	; 0xe6e <UART_sendString>
		LCD_displayStringRowColumn(0, 0, "plz re-enter the ");
    21ac:	22 e7       	ldi	r18, 0x72	; 114
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	a9 01       	movw	r20, r18
    21b6:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "same pass:");
    21ba:	24 e8       	ldi	r18, 0x84	; 132
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	a9 01       	movw	r20, r18
    21c4:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
		readPassword(confirmPassword,5);
    21c8:	ce 01       	movw	r24, r28
    21ca:	09 96       	adiw	r24, 0x09	; 9
    21cc:	65 e0       	ldi	r22, 0x05	; 5
    21ce:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <readPassword>
		confirmPassword[5] = '#';confirmPassword[6] = '\0';
    21d2:	83 e2       	ldi	r24, 0x23	; 35
    21d4:	8e 87       	std	Y+14, r24	; 0x0e
    21d6:	1f 86       	std	Y+15, r1	; 0x0f
		UART_sendString(confirmPassword);
    21d8:	ce 01       	movw	r24, r28
    21da:	09 96       	adiw	r24, 0x09	; 9
    21dc:	0e 94 37 07 	call	0xe6e	; 0xe6e <UART_sendString>
	}while(UART_recieveByte()!=CONFIRM);
    21e0:	0e 94 28 07 	call	0xe50	; 0xe50 <UART_recieveByte>
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	31 f6       	brne	.-116    	; 0x2174 <main+0x24>


	/*clear the screen*/
	LCD_clearScreen();
    21e8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_clearScreen>
	while(1){
		/*variables*/
		uint8 choice;
		uint8 enteredPassword[7];
		/*display the options to the user*/
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    21ec:	2f e8       	ldi	r18, 0x8F	; 143
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	a9 01       	movw	r20, r18
    21f6:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    21fa:	2d e9       	ldi	r18, 0x9D	; 157
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	a9 01       	movw	r20, r18
    2204:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
		choice = KEYPAD_getPressedKey();
    2208:	0e 94 bf 09 	call	0x137e	; 0x137e <KEYPAD_getPressedKey>
    220c:	89 83       	std	Y+1, r24	; 0x01
		if(choice=='+'){
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	8b 32       	cpi	r24, 0x2B	; 43
    2212:	21 f5       	brne	.+72     	; 0x225c <main+0x10c>
			do{
				/*request from the control ECU to open*/
				UART_sendByte(OPEN);
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	0e 94 11 07 	call	0xe22	; 0xe22 <UART_sendByte>
				/*request the user to open the password*/
				LCD_clearScreen();
    221a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "plz enter pass :");
    221e:	20 e6       	ldi	r18, 0x60	; 96
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	a9 01       	movw	r20, r18
    2228:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "");
    222c:	21 e7       	ldi	r18, 0x71	; 113
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	60 e0       	ldi	r22, 0x00	; 0
    2234:	a9 01       	movw	r20, r18
    2236:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
				readPassword(enteredPassword, 5);
    223a:	ce 01       	movw	r24, r28
    223c:	40 96       	adiw	r24, 0x10	; 16
    223e:	65 e0       	ldi	r22, 0x05	; 5
    2240:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <readPassword>
				enteredPassword[5] = '#';
    2244:	83 e2       	ldi	r24, 0x23	; 35
    2246:	8d 8b       	std	Y+21, r24	; 0x15
				enteredPassword[6] = '\0';
    2248:	1e 8a       	std	Y+22, r1	; 0x16
				/*send the password to the contorl ECU*/
				UART_sendString(enteredPassword);
    224a:	ce 01       	movw	r24, r28
    224c:	40 96       	adiw	r24, 0x10	; 16
    224e:	0e 94 37 07 	call	0xe6e	; 0xe6e <UART_sendString>
			}while(UART_recieveByte() != CONFIRM);
    2252:	0e 94 28 07 	call	0xe50	; 0xe50 <UART_recieveByte>
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	e9 f6       	brne	.-70     	; 0x2214 <main+0xc4>
    225a:	c8 cf       	rjmp	.-112    	; 0x21ec <main+0x9c>
		}else if(choice == '-'){
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	8d 32       	cpi	r24, 0x2D	; 45
    2260:	29 f6       	brne	.-118    	; 0x21ec <main+0x9c>
			do{
				/*send the request to the control ECU*/
				UART_sendByte(CHANGE);
    2262:	83 e0       	ldi	r24, 0x03	; 3
    2264:	0e 94 11 07 	call	0xe22	; 0xe22 <UART_sendByte>
				/*read the old password*/
				LCD_clearScreen();
    2268:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "plz enter pass :");
    226c:	20 e6       	ldi	r18, 0x60	; 96
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	a9 01       	movw	r20, r18
    2276:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "");
    227a:	21 e7       	ldi	r18, 0x71	; 113
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	a9 01       	movw	r20, r18
    2284:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
				readPassword(enteredPassword, 5);
    2288:	ce 01       	movw	r24, r28
    228a:	40 96       	adiw	r24, 0x10	; 16
    228c:	65 e0       	ldi	r22, 0x05	; 5
    228e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <readPassword>
				enteredPassword[5] = '#';
    2292:	83 e2       	ldi	r24, 0x23	; 35
    2294:	8d 8b       	std	Y+21, r24	; 0x15
				enteredPassword[6] = '\0';
    2296:	1e 8a       	std	Y+22, r1	; 0x16
				/*send the old password to control ECU*/
				UART_sendString(enteredPassword);
    2298:	ce 01       	movw	r24, r28
    229a:	40 96       	adiw	r24, 0x10	; 16
    229c:	0e 94 37 07 	call	0xe6e	; 0xe6e <UART_sendString>
				/*wait until the password is correct*/
			}while(UART_recieveByte()!=CONFIRM);
    22a0:	0e 94 28 07 	call	0xe50	; 0xe50 <UART_recieveByte>
    22a4:	81 30       	cpi	r24, 0x01	; 1
    22a6:	e9 f6       	brne	.-70     	; 0x2262 <main+0x112>
			/*if it's true password then will read the new Password*/
			LCD_clearScreen();
    22a8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "enter new pass :");
    22ac:	2d ea       	ldi	r18, 0xAD	; 173
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	a9 01       	movw	r20, r18
    22b6:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "");
    22ba:	21 e7       	ldi	r18, 0x71	; 113
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	a9 01       	movw	r20, r18
    22c4:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_displayStringRowColumn>
			readPassword(password, PASSWORD_SIZE);
    22c8:	ce 01       	movw	r24, r28
    22ca:	02 96       	adiw	r24, 0x02	; 2
    22cc:	65 e0       	ldi	r22, 0x05	; 5
    22ce:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <readPassword>
			enteredPassword[5] = '#';
    22d2:	83 e2       	ldi	r24, 0x23	; 35
    22d4:	8d 8b       	std	Y+21, r24	; 0x15
			enteredPassword[6] = '\0';
    22d6:	1e 8a       	std	Y+22, r1	; 0x16
			/*send it to the control ECU*/
			UART_sendString(password);
    22d8:	ce 01       	movw	r24, r28
    22da:	02 96       	adiw	r24, 0x02	; 2
    22dc:	0e 94 37 07 	call	0xe6e	; 0xe6e <UART_sendString>
    22e0:	85 cf       	rjmp	.-246    	; 0x21ec <main+0x9c>

000022e2 <__udivmodhi4>:
    22e2:	aa 1b       	sub	r26, r26
    22e4:	bb 1b       	sub	r27, r27
    22e6:	51 e1       	ldi	r21, 0x11	; 17
    22e8:	07 c0       	rjmp	.+14     	; 0x22f8 <__udivmodhi4_ep>

000022ea <__udivmodhi4_loop>:
    22ea:	aa 1f       	adc	r26, r26
    22ec:	bb 1f       	adc	r27, r27
    22ee:	a6 17       	cp	r26, r22
    22f0:	b7 07       	cpc	r27, r23
    22f2:	10 f0       	brcs	.+4      	; 0x22f8 <__udivmodhi4_ep>
    22f4:	a6 1b       	sub	r26, r22
    22f6:	b7 0b       	sbc	r27, r23

000022f8 <__udivmodhi4_ep>:
    22f8:	88 1f       	adc	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	5a 95       	dec	r21
    22fe:	a9 f7       	brne	.-22     	; 0x22ea <__udivmodhi4_loop>
    2300:	80 95       	com	r24
    2302:	90 95       	com	r25
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	08 95       	ret

0000230a <__udivmodsi4>:
    230a:	a1 e2       	ldi	r26, 0x21	; 33
    230c:	1a 2e       	mov	r1, r26
    230e:	aa 1b       	sub	r26, r26
    2310:	bb 1b       	sub	r27, r27
    2312:	fd 01       	movw	r30, r26
    2314:	0d c0       	rjmp	.+26     	; 0x2330 <__udivmodsi4_ep>

00002316 <__udivmodsi4_loop>:
    2316:	aa 1f       	adc	r26, r26
    2318:	bb 1f       	adc	r27, r27
    231a:	ee 1f       	adc	r30, r30
    231c:	ff 1f       	adc	r31, r31
    231e:	a2 17       	cp	r26, r18
    2320:	b3 07       	cpc	r27, r19
    2322:	e4 07       	cpc	r30, r20
    2324:	f5 07       	cpc	r31, r21
    2326:	20 f0       	brcs	.+8      	; 0x2330 <__udivmodsi4_ep>
    2328:	a2 1b       	sub	r26, r18
    232a:	b3 0b       	sbc	r27, r19
    232c:	e4 0b       	sbc	r30, r20
    232e:	f5 0b       	sbc	r31, r21

00002330 <__udivmodsi4_ep>:
    2330:	66 1f       	adc	r22, r22
    2332:	77 1f       	adc	r23, r23
    2334:	88 1f       	adc	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	1a 94       	dec	r1
    233a:	69 f7       	brne	.-38     	; 0x2316 <__udivmodsi4_loop>
    233c:	60 95       	com	r22
    233e:	70 95       	com	r23
    2340:	80 95       	com	r24
    2342:	90 95       	com	r25
    2344:	9b 01       	movw	r18, r22
    2346:	ac 01       	movw	r20, r24
    2348:	bd 01       	movw	r22, r26
    234a:	cf 01       	movw	r24, r30
    234c:	08 95       	ret

0000234e <__prologue_saves__>:
    234e:	2f 92       	push	r2
    2350:	3f 92       	push	r3
    2352:	4f 92       	push	r4
    2354:	5f 92       	push	r5
    2356:	6f 92       	push	r6
    2358:	7f 92       	push	r7
    235a:	8f 92       	push	r8
    235c:	9f 92       	push	r9
    235e:	af 92       	push	r10
    2360:	bf 92       	push	r11
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	ca 1b       	sub	r28, r26
    2378:	db 0b       	sbc	r29, r27
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	09 94       	ijmp

00002386 <__epilogue_restores__>:
    2386:	2a 88       	ldd	r2, Y+18	; 0x12
    2388:	39 88       	ldd	r3, Y+17	; 0x11
    238a:	48 88       	ldd	r4, Y+16	; 0x10
    238c:	5f 84       	ldd	r5, Y+15	; 0x0f
    238e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2390:	7d 84       	ldd	r7, Y+13	; 0x0d
    2392:	8c 84       	ldd	r8, Y+12	; 0x0c
    2394:	9b 84       	ldd	r9, Y+11	; 0x0b
    2396:	aa 84       	ldd	r10, Y+10	; 0x0a
    2398:	b9 84       	ldd	r11, Y+9	; 0x09
    239a:	c8 84       	ldd	r12, Y+8	; 0x08
    239c:	df 80       	ldd	r13, Y+7	; 0x07
    239e:	ee 80       	ldd	r14, Y+6	; 0x06
    23a0:	fd 80       	ldd	r15, Y+5	; 0x05
    23a2:	0c 81       	ldd	r16, Y+4	; 0x04
    23a4:	1b 81       	ldd	r17, Y+3	; 0x03
    23a6:	aa 81       	ldd	r26, Y+2	; 0x02
    23a8:	b9 81       	ldd	r27, Y+1	; 0x01
    23aa:	ce 0f       	add	r28, r30
    23ac:	d1 1d       	adc	r29, r1
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	ed 01       	movw	r28, r26
    23ba:	08 95       	ret

000023bc <itoa>:
    23bc:	fb 01       	movw	r30, r22
    23be:	9f 01       	movw	r18, r30
    23c0:	e8 94       	clt
    23c2:	42 30       	cpi	r20, 0x02	; 2
    23c4:	c4 f0       	brlt	.+48     	; 0x23f6 <itoa+0x3a>
    23c6:	45 32       	cpi	r20, 0x25	; 37
    23c8:	b4 f4       	brge	.+44     	; 0x23f6 <itoa+0x3a>
    23ca:	4a 30       	cpi	r20, 0x0A	; 10
    23cc:	29 f4       	brne	.+10     	; 0x23d8 <itoa+0x1c>
    23ce:	97 fb       	bst	r25, 7
    23d0:	1e f4       	brtc	.+6      	; 0x23d8 <itoa+0x1c>
    23d2:	90 95       	com	r25
    23d4:	81 95       	neg	r24
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	64 2f       	mov	r22, r20
    23da:	77 27       	eor	r23, r23
    23dc:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__udivmodhi4>
    23e0:	80 5d       	subi	r24, 0xD0	; 208
    23e2:	8a 33       	cpi	r24, 0x3A	; 58
    23e4:	0c f0       	brlt	.+2      	; 0x23e8 <itoa+0x2c>
    23e6:	89 5d       	subi	r24, 0xD9	; 217
    23e8:	81 93       	st	Z+, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	a1 f7       	brne	.-24     	; 0x23d8 <itoa+0x1c>
    23f0:	16 f4       	brtc	.+4      	; 0x23f6 <itoa+0x3a>
    23f2:	5d e2       	ldi	r21, 0x2D	; 45
    23f4:	51 93       	st	Z+, r21
    23f6:	10 82       	st	Z, r1
    23f8:	c9 01       	movw	r24, r18
    23fa:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <strrev>

000023fe <strrev>:
    23fe:	dc 01       	movw	r26, r24
    2400:	fc 01       	movw	r30, r24
    2402:	67 2f       	mov	r22, r23
    2404:	71 91       	ld	r23, Z+
    2406:	77 23       	and	r23, r23
    2408:	e1 f7       	brne	.-8      	; 0x2402 <strrev+0x4>
    240a:	32 97       	sbiw	r30, 0x02	; 2
    240c:	04 c0       	rjmp	.+8      	; 0x2416 <strrev+0x18>
    240e:	7c 91       	ld	r23, X
    2410:	6d 93       	st	X+, r22
    2412:	70 83       	st	Z, r23
    2414:	62 91       	ld	r22, -Z
    2416:	ae 17       	cp	r26, r30
    2418:	bf 07       	cpc	r27, r31
    241a:	c8 f3       	brcs	.-14     	; 0x240e <strrev+0x10>
    241c:	08 95       	ret

0000241e <_exit>:
    241e:	f8 94       	cli

00002420 <__stop_program>:
    2420:	ff cf       	rjmp	.-2      	; 0x2420 <__stop_program>
